---
import { getLangFromUrl } from "@i18n/utils";
import { ViewTransitions } from "astro:transitions";
interface Props {
  title: string;
}

const { title } = Astro.props;
const lang = getLangFromUrl(Astro.url);
---

<!doctype html>
<html lang={lang} class="dark">
  <head>
    <meta charset="UTF-8" />

    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>

    <ViewTransitions />
  </head>
  <body>
    <slot />
    <style is:global>
      @font-face {
        font-family: "Outfit";
        src: url("/fonts/Outfit-Regular.woff2") format("woff2");
        font-weight: 400;
        font-style: normal;
        font-display: swap;
      }

      @font-face {
        font-family: "Outfit";
        src: url("/fonts/Outfit-Medium.woff2") format("woff2");
        font-weight: 600;
        font-style: normal;
        font-display: swap;
      }
      :root {
        --background: 245, 247, 250;
        --background-lifted: 255, 255, 255;
        --background-lifted-emphasized: 235, 235, 235;
        --foreground: 0, 0, 0;
        --forground-deemphasized: 128, 129, 132;

        --bg-radial-color-1: 0 75 221 / 37%;
        --bg-radial-color-2: 119 20 151 / 32%;
      }
      html {
        font-family: "Outfit", system-ui, sans-serif;
        color: rgb(var(--foreground));
        background-color: rgb(var(--background));
        transition: all 0.2s ease-in-out;
        scroll-behavior: smooth;

        &.dark {
          --background: 27, 27, 27;
          --background-lifted: 12, 12, 12, 0.4;
          --background-lifted-emphasized: 42, 42, 42;
          --foreground: 255, 255, 255;
          --forground-deemphasized: 180, 180, 180;
        }
      }

      html.lenis,
      html.lenis body {
        height: auto;
      }

      .lenis.lenis-smooth {
        scroll-behavior: auto !important;
      }

      .lenis.lenis-smooth [data-lenis-prevent] {
        overscroll-behavior: contain;
      }

      .lenis.lenis-stopped {
        overflow: hidden;
      }

      .lenis.lenis-smooth iframe {
        pointer-events: none;
      }

      .transparent-card {
        @apply rounded-sm border backdrop-blur-[3px] border-border bg-backgroundLifted hover:border-borderHover transition-colors;
      }
    </style>

    <script>
      import gsap from "gsap";
      import Lenis from "lenis";

      import { ScrollTrigger } from "gsap/ScrollTrigger";

      const lenis = new Lenis();

      lenis.on("scroll", ScrollTrigger.update);

      gsap.ticker.add((time) => {
        lenis.raf(time * 1000);
      });

      gsap.ticker.lagSmoothing(0);

      gsap.registerPlugin(ScrollTrigger);

      const cards = gsap.utils.toArray<HTMLElement>(".fade-in-card");
      cards.forEach((card) => {
        gsap.set(card, { y: "20%", autoAlpha: 0, scale: 0.9 });

        gsap.to(card, {
          y: 0,
          scale: 1,
          autoAlpha: 1,
          duration: 0.5,
          scrollTrigger: {
            trigger: card,
            start: "top 80%",
            invalidateOnRefresh: true,
          },
        });
      });
    </script>
  </body>
</html>
