---
import { getLangFromUrl } from "@i18n/utils";
import { ViewTransitions } from "astro:transitions";
interface Props {
  title: string;
}

const { title } = Astro.props;
const lang = getLangFromUrl(Astro.url);
---

<!doctype html>
<html lang={lang} class="dark">
  <head>
    <meta charset="UTF-8" />

    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>

    <ViewTransitions />
  </head>
  <body>
    <slot />
    <style is:global>
      @font-face {
        font-family: "Outfit";
        src: url("/fonts/Outfit-Regular.woff2") format("woff2");
        font-weight: 400;
        font-style: normal;
        font-display: swap;
      }

      @font-face {
        font-family: "Outfit";
        src: url("/fonts/Outfit-Medium.woff2") format("woff2");
        font-weight: 600;
        font-style: normal;
        font-display: swap;
      }
      :root {
        --background: 245, 247, 250;
        --background-lifted: 255, 255, 255;
        --background-lifted-emphasized: 235, 235, 235;
        --foreground: 0, 0, 0;
        --forground-deemphasized: 128, 129, 132;

        --bg-radial-color-1: 0 75 221 / 37%;
        --bg-radial-color-2: 119 20 151 / 32%;
      }
      html {
        font-family: "Outfit", system-ui, sans-serif;
        color: rgb(var(--foreground));
        background-color: rgb(var(--background));
        transition: all 0.2s ease-in-out;
        scroll-behavior: smooth;

        &.dark {
          --background: 27, 27, 27;
          --background-lifted: 12, 12, 12, 0.4;
          --background-lifted-emphasized: 42, 42, 42;
          --foreground: 255, 255, 255;
          --forground-deemphasized: 180, 180, 180;
        }
      }

      .fade-in-card {
        @apply translate-y-[10%] invisible opacity-0;
        will-change: transform, opacity, visibility;
      }

      .transparent-card {
        @apply rounded-sm border backdrop-blur-[3px] border-border bg-backgroundLifted hover:border-borderHover transition-all;
      }

      .fade-in-card.is-visible {
        animation: fade-in-from-bottom 500ms ease-in forwards;
      }

      @keyframes fade-in-from-bottom {
        to {
          transform: translateY(0);
          opacity: 1;
          visibility: visible;
        }
      }
    </style>

    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const isMobile = window.matchMedia("(max-width: 640px)").matches;

        const observer = new IntersectionObserver(
          (entries) => {
            entries.forEach((entry) => {
              if (entry.isIntersecting) {
                entry.target.classList.add("is-visible");
              }
            });
          },
          {
            root: null,
            rootMargin: "0px",
            threshold: isMobile ? 0.1 : 0.33,
          }
        );

        document.querySelectorAll(".fade-in-card").forEach((card) => {
          observer.observe(card);
        });
      });
    </script>
  </body>
</html>
